@model RentaMaq.Models.Producto

@{
    ViewBag.Title = "Editar Producto";        
}

<h2>Editar Informacion Producto</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Producto</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ProductoID)

        <div class="form-group">
            @Html.LabelFor(model => model.numeroDeParte,"Numero de Parte", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.numeroDeParte, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numeroDeParte, "", new { @class = "text-danger" })
                <div id="mensajeErrorCodigo" class="alert alert-danger hidden">
                    <strong>Error: </strong> Ya existe el producto con este codigo
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.precioUnitario,"Precio Unitario", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.precioUnitario, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.precioUnitario, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.descripcion,"Descripcion", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="idBodega">Bodega</label>
            <div class="col-md-10">
                <select class="form-control idBodega" name="idBodega">
                    @foreach (RentaMaq.Models.Bodegas Bodega in (new RentaMaq.DAL.Context().bodegas.ToList()))
                    {
                        if (Model.idBodega.Equals(Bodega.BodegasID))
                        {
                            <option value="@Bodega.BodegasID" selected>@Bodega.nombre/@Bodega.ubicacion</option>
                        }
                        else
                        {
                            <option value="@Bodega.BodegasID">@Bodega.nombre/@Bodega.ubicacion</option>
                        }                        
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.descripcion2,"Descripcion 2", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.descripcion2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descripcion2, "", new { @class = "text-danger" })
            </div>
        </div>

      
        <div class="form-group">
            <label class="control-label col-md-2" for="stockMinimo">Stock Actual</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.stockActual, new { htmlAttributes = new { @class = "form-control double" } })
                @Html.ValidationMessageFor(model => model.stockActual, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.stockMinimo,"Stock Minimo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.stockMinimo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.stockMinimo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.unidadDeMedida,"Unidad de Medida", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.unidadDeMedida, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.unidadDeMedida, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ubicacion,"Ubicacion", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ubicacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ubicacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.codigo,"Codigo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.codigo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.codigo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar Cambios" id="BtnCrear" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver atras", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/customJquery.js")

    <script>

        $(document).ready(function () {
           
            $('.double').bind('keypress', function (event) {
                var regex = new RegExp("^([0-9]*|[.]*)$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                if (!regex.test(key)) {
                    event.preventDefault();
                    return false;
                }
            });
        });
    </script>

}
